#
# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or 
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
# for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with this program; if not, write to the Free Software Foundation, Inc., 
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
#
# This file is part of XDD
#
# Description: XDD Makefile
#

#
# Autoconf provided values
#
VERSION := @PACKAGE_VERSION@
XDD_DIR := @CONFIG_PROJECT_DIR@
BUILD_DIR := @CONFIG_BUILD_DIR@
INSTALL_DIR := @prefix@
XDDCP_ENABLED := @XDDCP_ENABLED@
CC_EXE := @CC@
DEPC_EXE := @DEPC_PATH@
TAR_EXE := @TAR@

#
# Tools
#
AR = ar
AUTOCONF = autoconf
CC = $(CC_EXE)
CP = cp
DEPC = $(DEPC_EXE)
DEPGEN = $(XDD_DIR)/support/depend.sh
ETAGS = etags
FIND = find
INSTALL = $(XDD_DIR)/support/install-sh
MKDIR = mkdir -p
LD = $(CC_EXE)
LN = ln -sf
MV = mv -f
RM = rm -f
RMDIR = rmdir -f
TAR = $(TAR_EXE)

#
# Configuration
#
SHELL =	/bin/sh
OS = $(shell uname)

#
# Source locations
#
DOC_DIR = doc
LIB_DIR = lib
SRC_DIR = src
HDR_DIR = include
BASE_DIR = $(SRC_DIR)/base
BX_DIR = $(SRC_DIR)/bx
CLIENT_DIR = $(SRC_DIR)/client
CLIENT_LITE_DIR = $(SRC_DIR)/client/lite
COMMON_DIR = $(SRC_DIR)/common
COMPAT_DIR = $(SRC_DIR)/compat
FS_DIR = $(SRC_DIR)/fs
NET_DIR = $(SRC_DIR)/net
XNET_DIR = $(SRC_DIR)/xnet
PUBLIC_DIR = $(SRC_DIR)/public
TOOLS_DIR = $(SRC_DIR)/tools
XNI_DIR = $(SRC_DIR)/xni

#
# Include module makefiles
#
include $(BASE_DIR)/module.mk
include $(BX_DIR)/module.mk
include $(CLIENT_DIR)/module.mk
include $(CLIENT_LITE_DIR)/module.mk
include $(COMMON_DIR)/module.mk
include $(COMPAT_DIR)/module.mk
include $(FS_DIR)/module.mk
include $(NET_DIR)/module.mk
include $(PUBLIC_DIR)/module.mk
include $(TOOLS_DIR)/module.mk
include $(XNI_DIR)/module.mk
include $(XNET_DIR)/module.mk

#
# Construct information from modules
#
XDD_SRC := $(BASE_SRC) $(CLIENT_SRC) $(COMMON_SRC) \
	$(COMPAT_SRC) $(FS_SRC) $(NET_SRC) $(PUBLIC_SRC) \
	$(TOOLS_SRC) $(XNI_SRC) $(XNET_SRC)

#
# XDD module build targets
#
XDD_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(XDD_SRC)))
TOOL_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(TOOL_SRC)))

#
# Project executable objects
#
BXT_EXE_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(BXT_EXE_SRC) $(BX_SRC)))
GETTIME_EXE_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(GETTIME_EXE_SRC)))
GETFILESIZE_EXE_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(GETFILESIZE_EXE_SRC)))
GETHOSTIP_EXE_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(GETHOSTIP_EXE_SRC)))
READ_TSDUMPS_EXE_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(READ_TSDUMPS_EXE_SRC)))
TRUNCATE_EXE_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(TRUNCATE_EXE_SRC)))
TS_EXE_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(TS_EXE_SRC)))
XDD_EXE_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(XDD_EXE_SRC)))
XDD_LITE_EXE_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(XDD_LITE_EXE_SRC) $(CLIENT_LITE_SRC)))

#
# All objects
#
ALL_OBJS = \
	$(BXT_EXE_OBJS) \
	$(XDD_OBJS) \
	$(TOOL_OBJS) \
	$(CLIENT_EXE_OBJS) \
	$(XDD_LITE_EXE_OBJS) \
	$(GETTIME_EXE_OBJS) \
	$(READ_TSDUMPS_EXE_OBJS) \
	$(TS_EXE_OBJS) 

#
# Source code dependency generation
#
XDD_DEPENDS := $(patsubst %.c, %.d, $(filter %.c, $(XDD_SRC)))
TOOLS_DEPENDS := $(patsubst %.c, %.d, $(filter %.c, $(TOOLS_SRC)))
XDD_EXE_DEPENDS := $(patsubst %.c, %.d, $(filter %.c, $(CLIENT_EXE_SRC)))
XDD_LITE_EXE_DEPENDS := $(patsubst %.c, %.d, $(filter %.c, $(CLIENT_LITE_EXE_SRC)))
BXT_EXE_DEPENDS := $(patsubst %.c, %.d, $(filter %.c, $(BXT_EXE_SRC)))

#
# Default build settings
#
INCLUDES = -I$(BASE_DIR) -I$(CLIENT_DIR) -I$(CLIENT_LITE_DIR) -I$(COMMON_DIR) \
		-I$(COMPAT_DIR) -I$(FS_DIR) -I$(NET_DIR) \
		-I$(PUBLIC_DIR) -I$(TOOLS_DIR) -I$(XNI_DIR)

ARFLAGS = @CONFIG_ARFLAGS@

CPPFLAGS = @CONFIG_CPPFLAGS@ \
	@DEFS@ \
	$(CONFIDENCE_ENABLED) \
	$(INCLUDES)

CFLAGS =  @CONFIG_CFLAGS@

LDFLAGS = @CONFIG_LDFLAGS@ 

LIBS = @CONFIG_LIBS@

#
# Build rules
#
.DEFAULT: all

all: xdd xdd-read-tsdumps xdd-getfilesize xdd-gethostip xdd-truncate libs

bxt: bin/bxt

xdd: bin/xdd

xdd-lite: bin/xdd-lite

xdd-tserver: bin/xdd-tserver

xdd-gettime: bin/xdd-gettime

xdd-getfilesize: bin/xdd-getfilesize

xdd-gethostip: bin/xdd-gethostip

xdd-read-tsdumps: bin/xdd-read-tsdumps

xdd-truncate: bin/xdd-truncate

.PHONY: all xdd xdd-lite xdd-tserver xdd-getfilesize xdd-gethostip xdd-gettime xdd-read-tsdumps xdd-truncate

#
# Build rules for libraries
#
libs: $(LIB_DIR)/libxdd.a

$(LIB_DIR)/libxdd.a: $(XDD_OBJS)
	@echo "[AR] $@"
	@$(AR) $(ARFLAGS) $@ $^

.PHONY: libs

#
# Build rules for executable targets
#
bin/xdd: $(XDD_OBJS) $(XDD_EXE_OBJS)
	@echo "[LD] $@ ..."
	@$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

bin/xdd-lite: $(XDD_LITE_EXE_OBJS) $(LIB_DIR)/libxdd.a 
	@echo "[LD] $@ ..."
	$(LD) $(LDFLAGS) -L$(LIB_DIR) -o $@ $(XDD_LITE_EXE_OBJS) -lxdd $(LIBS)

bin/bxt: $(BXT_EXE_OBJS) $(LIB_DIR)/libxdd.a
	@echo "[LD] $@ ..."
	$(LD) $(LDFLAGS) -L$(LIB_DIR) -o $@ $(BXT_EXE_OBJS) -lxdd $(LIBS)

bin/xdd-tserver: $(COMMON_DIR)/nclk.o $(NET_DIR)/net_utils.o $(TS_EXE_OBJS) 
	@echo "[LD] $@ ..."
	@$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

bin/xdd-gettime: $(COMMON_DIR)/global_time.o $(COMMON_DIR)/nclk.o $(NET_DIR)/net_utils.o $(GETTIME_EXE_OBJS) 
	@echo "[LD] $@ ..."
	@$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

bin/xdd-read-tsdumps: $(READ_TSDUMPS_EXE_OBJS)
	@echo "[LD] $@ ..."
	@$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

bin/xdd-getfilesize: $(GETFILESIZE_EXE_OBJS)
	@echo "[LD] $@ ..."
	@$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

bin/xdd-gethostip: $(GETHOSTIP_EXE_OBJS)
	@echo "[LD] $@ ..."
	@$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

bin/xdd-truncate: $(TRUNCATE_EXE_OBJS)
	@echo "[LD] $@ ..."
	@$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

#
# Build rules for installation
#
install_pre:
	$(INSTALL) -d $(INSTALL_DIR)/bin
	$(INSTALL) -d $(INSTALL_DIR)/etc
	$(INSTALL) -d $(INSTALL_DIR)/lib

install_xddcp: install_pre
ifeq (true,$(XDDCP_ENABLED))
	$(INSTALL) -c -m 755 contrib/xddcp $(INSTALL_DIR)/bin/xddcp
	$(INSTALL) -c -m 755 contrib/xddmcp $(INSTALL_DIR)/bin/xddmcp
	$(INSTALL) -c -m 755 etc/xddmcp.conf.example $(INSTALL_DIR)/etc/xddmcp.conf.example
endif

fastinstall: all
	$(RM) /sbin/xdd
	cp bin/xdd /sbin
	$(RM) /sbin/xdd-tserver
	cp bin/xdd-tserver /sbin
	$(RM) /sbin/xdd-gettime
	cp bin/xdd-gettime /sbin
	cp bin/xdd-read-tsdumps /sbin

install_libs: install_pre
	$(INSTALL) -c -m 755 $(LIB_DIR)/libxdd.a $(INSTALL_DIR)/lib/libxdd.a

fullinstall: install_pre
	$(INSTALL) -c -m 755 bin/xdd $(INSTALL_DIR)/bin/xdd
	$(INSTALL) -c -m 755 bin/xdd-read-tsdumps $(INSTALL_DIR)/bin/xdd-read-tsdumps
	$(INSTALL) -c -m 755 bin/xdd-getfilesize $(INSTALL_DIR)/bin/xdd-getfilesize
	$(INSTALL) -c -m 755 bin/xdd-gethostip $(INSTALL_DIR)/bin/xdd-gethostip
	$(INSTALL) -c -m 755 bin/xdd-truncate $(INSTALL_DIR)/bin/xdd-truncate
	$(INSTALL) -c -m 755 contrib/xdd-plot-tsdumps $(INSTALL_DIR)/bin/xdd-plot-tsdumps
	$(INSTALL) -c -m 755 contrib/xdd-plot-tsdumps-dk $(INSTALL_DIR)/bin/xdd-plot-tsdumps-dk
	$(INSTALL) -c -m 755 contrib/xddft $(INSTALL_DIR)/bin/xddft

install: all install_pre fullinstall install_libs install_xddcp

.PHONY: install install_pre install_libs install_xddcp

#
# Miscellaneous build rules
#
XDDVERSION := $(VERSION)
baseversion:
	echo "#define XDD_BASE_VERSION $(XDDVERSION)" > $(BASE_DIR)/xdd_base_version.h

TARPATH := $(shell basename ${PWD})
TARFILE := xdd-$(shell date +%s).tgz
TARFLAGS := --exclude \*.o --exclude \*~ --exclude .DS_STORE --exclude .git
tarball:
	@echo "[TAR] $(TARFILE)"
	@pushd .; cd .. && $(TAR) $(TARFLAGS) -czf $(TARFILE) $(TARPATH); popd

.PHONY: baseversion dist fulldist tarball

#
# Build rules for documentation
#
doc:
	doxygen doc/Doxyfile
	cd doc/doxygen/latex && make pdf

TAGS: $(XDD_SRC)
	@echo "[TAGS]"
	@$(ETAGS) $^

#
# Build test support infrastructure
#
MPICC = mpicc

contrib/mpil: contrib/mpil.o
	$(MPICC) $^ -o $@

contrib/mpil.o: contrib/mpil.c
	$(MPICC) -c $^ -o $@

#
# Build other tests
#
bin/basic-ib-test: tests/other/xni/basic-ib-test.c $(LIB_DIR)/libxdd.a
	$(CC) $(CPPFLAGS) $(CFLAGS) -L$(LIB_DIR) $< -lxdd $(LIBS) -o $@

bin/basic-xni-test: tests/other/xni/basic-xni-test.c $(LIB_DIR)/libxdd.a
	$(CC) $(CPPFLAGS) $(CFLAGS) -L$(LIB_DIR) $< -lxdd $(LIBS) -o $@

test: contrib/mpil bin/basic-xni-test

check: bin/basic-xni-test bin/basic-ib-test
	@# This should somehow run all of the tests.

.PHONY: test check

#
# Build rules for cleaning up derived files
#
testclean:
	$(RM) contrib/mpil.o
	$(RM) contrib/mpil

depclean:
	$(info Cleaning the $(OS) dependency files )
	@$(RM) $(XDD_DEPENDS) $(TOOLS_DEPENDS)

docclean:
	$(info Cleaning the $(OS) documentation files )
	@$(RM) -r doc/doxygen

libclean:
	$(info Cleaning the $(OS) LIBRARY files )
	@$(RM) $(LIB_DIR)/libxdd.*

oclean:
	$(info Cleaning the $(OS) OBJECT files )
	@$(RM) $(ALL_OBJS) 

tclean:
	$(info Cleaning the $(OS) TOOLS OBJECT files )
	@$(RM) src/tools/*.o


clean: depclean libclean oclean tclean
	$(info Cleaning the $(OS) executable files )
	@$(RM) 	bin/xdd \
	 	bin/xdd-lite \
		bin/xdd-tserver\
		bin/xdd-getfilesize \
		bin/xdd-gethostip \
		bin/xdd-gettime \
		bin/xdd-read-tsdumps \
		bin/xdd-truncate \
		bin/xdd-read-tsdumps \
		bin/bxt \
		a.out 

.PHONY: testclean depclean docclean libclean oclean clean

#
# Rules for building the distribution
#
DISTCHECK_DIR := $(PWD)/tests/distcheck

xdd-$(XDDVERSION):
	git archive --format=tar --prefix=$@/ master | $(TAR) xf -
	$(FIND) $@ -name .gitignore -exec rm {} \;
	cd $@ && $(AUTOCONF)

xdd-$(XDDVERSION).tar.gz: xdd-$(XDDVERSION)
	$(TAR) cfz $@ $<
	$(RM) -r $<

distclean: clean
	$(info Cleaning the distribution)
	@$(RM) GNUMakefile
	@$(RM) Makefile
	@$(RM) config.log config.status
	@$(RM) -r xdd-$(VERSION)
	@$(RM) xdd-$(VERSION).tar.gz

distcheck: dist
	$(RM) -r $(DISTCHECK_DIR)
	$(MKDIR) $(DISTCHECK_DIR)
	$(TAR) -C $(DISTCHECK_DIR) -xzf xdd-$(XDDVERSION).tar.gz
	cd $(DISTCHECK_DIR)/xdd-$(XDDVERSION) && ./configure --prefix=$(DISTCHECK_DIR)
	cd $(DISTCHECK_DIR)/xdd-$(XDDVERSION) && make
	#cd $(DISTCHECK_DIR)/xdd-$(XDDVERSION) && make check
	cd $(DISTCHECK_DIR)/xdd-$(XDDVERSION) && make install

dist: xdd-$(XDDVERSION).tar.gz

.PHONY: dist distcheck distclean

#
# Include dependency makefiles if building source target
#
DEPFILTER_MAKECMDGOALS := $(filter %clean %doc, $(MAKECMDGOALS))
ifeq ($(strip $(DEPFILTER_MAKECMDGOALS)),)
-include $(XDD_DEPENDS)
#-include $(TOOLS_DEPENDS)
endif

#
# Overload default rules so that compilation is prettier
#
%.o: %.c
	@echo "[CC] $< . . ."
	@$(CC) -c $(CPPFLAGS) $(CFLAGS) $< -o $@
#
# Additional rule for building dependencies
#
%.d: %.c
	@echo "[DEPC] $< . . ."
	@mkdir -p $(shell dirname $@)
	@$(DEPGEN) $(shell dirname $<) $(DEPC) -MM $(INCLUDES) $< > $@

