#
# This program is free software; you can redistribute it and/or modify 
# it under the terms of the GNU General Public License as published by 
# the Free Software Foundation; either version 2 of the License, or 
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
# for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with this program; if not, write to the Free Software Foundation, Inc., 
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
#
# This file is part of XDD
#
# Description: XDD Makefile
#

#
# Autoconf provided values
#
XDD_DIR := @CONFIG_PROJECT_DIR@
BUILD_DIR := @CONFIG_BUILD_DIR@
INSTALL_DIR := @prefix@
XFS_ENABLED_DEF := @CONFIG_XFS_ENABLED@ @CONFIG_XFS_PACKAGE@ @CONFIG_LINUX_MAGIC@
UTMPX_ENABLED := @CONFIG_UTMPX_ENABLED@

#
# Configuration
#
SHELL 	=	/bin/sh
OS 	= 	$(shell uname)

#
# Tools
#
DEPENDC = $(XDD_DIR)/support/depend.sh
INSTALL = $(XDD_DIR)/support/install-sh
RM = rm -f
MKDIR = mkdir -p
LN = ln -s

#
# Version information
#
DATESTAMP =	$(shell date +%m%d%y )
BUILD 	=	$(shell date +%H%M )
PROJECT =	xdd
VERSION_MAJOR =	7
VERSION_MINOR = 0
VERSION_REV = 0
VERSION_BUILD = rc19-pre
VERSION = $(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_REV)-$(VERSION_BUILD)
XDD_VERSION = $(VERSION)
XDDVERSION = \"$(VERSION)\"

#
# Source locations
#
DOC_DIR = doc
LIB_DIR = lib
SRC_DIR = src
HDR_DIR = include
BASE_DIR = $(SRC_DIR)/base
CLIENT_DIR = $(SRC_DIR)/client
COMMON_DIR = $(SRC_DIR)/common
COMPAT_DIR = $(SRC_DIR)/compat
FS_DIR = $(SRC_DIR)/fs
NET_DIR = $(SRC_DIR)/net
TOOLS_DIR = $(SRC_DIR)/tools

#
# Include module makefiles
#
include $(BASE_DIR)/module.mk
include $(CLIENT_DIR)/module.mk
include $(COMMON_DIR)/module.mk
include $(COMPAT_DIR)/module.mk
include $(FS_DIR)/module.mk
include $(NET_DIR)/module.mk
include $(TOOLS_DIR)/module.mk

#
# Construct information from modules
#
XDD_SRC := $(BASE_SRC) $(CLIENT_SRC) $(COMMON_SRC) $(COMPAT_SRC) \
	$(FS_SRC) $(NET_SRC) $(TOOLS_SRC)

#
# XDD module build targets
#
XDD_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(XDD_SRC)))
TOOLS_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(TOOLS_SRC)))

#
# Project executable objects
#
CLIENT_EXE_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(CLIENT_EXE_SRC)))
GETTIME_EXE_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(GETTIME_EXE_SRC)))
READ_TSDUMPS_EXE_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(READ_TSDUMPS_EXE_SRC)))
TS_EXE_OBJS := $(patsubst %.c, %.o, $(filter %.c, $(TS_EXE_SRC)))

#
# All objects
#
ALL_OBJS = \
	$(XDD_OBJS) \
	$(TOOL_OBJS) \
	$(CLIENT_EXE_OBJS) \
	$(GETTIME_EXE_OBJS) \
	$(READ_TSDUMPS_EXE_OBJS) \
	$(TS_EXE_OBJS) 

#
# Source code dependency generation
#
XDD_DEPENDS := $(patsubst %.c, %.d, $(filter %.c, $(XDD_SRC)))
TOOLS_DEPENDS := $(patsubst %.c, %.d, $(filter %.c, $(TOOLS_SRC)))
CLIENT_EXE_DEPENDS := $(patsubst %.c, %.d, $(filter %.c, $(CLIENT_EXE_SRC)))

#
# Default build settings
#
CC = gcc
INCLUDES = -I$(BASE_DIR) -I$(CLIENT_DIR) -I$(COMMON_DIR) \
		-I$(COMPAT_DIR) -I$(FS_DIR) -I$(NET_DIR) \
		-I$(TOOLS_DIR)
COMMONFLAGS = $(INCLUDES) @CONFIG_CFLAGS@ \
		-DXDD_VERSION=$(XDDVERSION) \
		-DXDD_VERSION_MAJOR=$(VERSION_MAJOR) \
		-DXDD_VERSION_MINOR=$(VERSION_MINOR) \
		-DXDD_VERSION_REV=$(VERSION_REV) \
		$(CONFIDENCE_ENABLED)
COMMONLIBS = @CONFIG_LDFLAGS@
CFLAGS = $(COMMONFLAGS) -DLINUX -O2 -ggdb
LIBRARIES = $(COMMONLIBS) -lpthread -lrt

#
# Default link settings
#
LD = gcc
LDFLAGS = -ggdb -R $(INSTALL_DIR)/lib

#
# Platform specific build settings
#
$(info Making xdd for $(OS))
ifeq '$(OS)' 'Linux'
CFLAGS = $(COMMONFLAGS) -DLINUX -O2 -DSG_IO -D__INTEL__ -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE $(XFS_ENABLED_DEF) $(UTMPX_ENABLED) -g -fno-strict-aliasing -fPIC -Wall
endif
ifeq '$(OS)' 'Darwin' 
CFLAGS = $(COMMONFLAGS) -DOSX -O2 -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE -g
OS = 		OSX
endif
ifeq '$(OS)' 'FreeBSD' 
CFLAGS = $(COMMONFLAGS) -DFREEBSD -O2 -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE -g
endif
ifeq '$(OS)' 'Solaris' 
CC = 		cc
CFLAGS = $(COMMONFLAGS) -DSOLARIS -g
LIBRARIES =	$(COMMONLIBS) -lsocket -lnsl -lpthread  -lxnet -lposix4 -v 
endif
ifeq '$(OS)' 'AIX'
CC =            xlc_r
CFLAGS = $(COMMONFLAGS) -DAIX -D_THREAD_SAFE -g -q64 -qcpluscmt -qthreaded
LDFLAGS = $(COMMONFLAGS) -DAIX -D_THREAD_SAFE -g -q64 -qcpluscmt -qthreaded
LIBRARIES = 	$(COMMONLIBS) -lnsl -lpthread -lxnet -v
endif

#
# Build rules
#
all:	xdd timeserver gettime read_tsdumps

libs: $(LIB_DIR)/libxdd.a $(LIB_DIR)/libxdd.so

$(LIB_DIR)/libxdd.a: $(XDD_OBJS)
	ar rcs $@ $^

$(LIB_DIR)/libxdd.so: $(XDD_OBJS)
	$(CC) -shared -Wl,-soname,$@ -o $@ $^

xdd: $(XDD_OBJS) $(CLIENT_EXE_OBJS)
	$(CC) -o $@ $(CFLAGS) $^ $(LIBRARIES)
	mv -f $@ bin/xdd.$(OS)
	$(RM) bin/xdd
	$(LN) xdd.$(OS) bin/xdd

timeserver: $(COMMON_DIR)/pclk.o $(TS_EXE_OBJS) 
	$(CC) -o $@ $(CFLAGS) $^ $(LIBRARIES)
	mv -f timeserver bin/timeserver.$(OS)
	$(RM) bin/timeserver
	$(LN) timeserver.$(OS) bin/timeserver

gettime: $(COMMON_DIR)/global_time.o  $(COMMON_DIR)/pclk.o $(GETTIME_EXE_OBJS) 
	$(CC)  -o $@ $(CFLAGS) $^ $(LIBRARIES)
	mv -f gettime bin/gettime.$(OS)
	$(RM) bin/gettime
	$(LN) gettime.$(OS) bin/gettime

read_tsdumps: $(READ_TSDUMPS_EXE_OBJS)
	$(CC) -o $@ $(CFLAGS) $^
	mv -f read_tsdumps bin/read_tsdumps.$(OS)
	$(RM) bin/read_tsdumps
	$(LN) read_tsdumps.$(OS) bin/read_tsdumps

baseversion:
	echo "#define XDD_BASE_VERSION $(XDDVERSION)" > src/xdd_base_version.h

dist:	clean baseversion tarball
		echo "Base Version $(XDDVERSION) Source Only"

fulldist:	clean baseversion all tarball
		echo "Base Version $(XDDVERSION) built"

tarball:
	tar cfz ../$(PROJECT).$(XDD_VERSION).tgz .

depclean:
	$(info Cleaning the $(OS) dependency files )
	@$(RM) $(XDD_DEPENDS) $(TOOLS_DEPENDS)

oclean:
	$(info Cleaning the $(OS) OBJECT files )
	$(RM) $(ALL_OBJS) 

clean: depclean oclean 
	$(info Cleaning the $(OS) executable files )
	$(RM) bin/xdd.$(OS) \
		bin/xdd \
		bin/timeserver.$(OS) \
		bin/timeserver \
		bin/gettime.$(OS) \
		bin/gettime \
		bin/read_tsdumps.$(OS) \
		bin/read_tsdumps \
		a.out 
	$(RM) -r doc/doxygen

install: fullinstall

fastinstall: all
	$(RM) /sbin/xdd.$(OS) /sbin/xdd
	cp bin/xdd.$(OS) /sbin
	$(LN) /sbin/xdd.$(OS) /sbin/xdd
	$(RM) /sbin/timeserver.$(OS) /sbin/timeserver
	cp bin/timeserver.$(OS) /sbin
	$(LN) /sbin/timeserver.$(OS) /sbin/timeserver
	$(RM) /sbin/gettime.$(OS) /sbin/gettime
	cp bin/gettime.$(OS) /sbin
	$(LN) /sbin/gettime.$(OS) /sbin/gettime
	cp bin/read_tsdumps.$(OS) /sbin
	$(LN) /sbin/read_tsdumps.$(OS) /sbin/read_tsdumps

fullinstall:
	$(INSTALL) -d $(INSTALL_DIR)/bin
	$(INSTALL) -d $(INSTALL_DIR)/etc
	$(INSTALL) -c -m 755 bin/xdd.$(OS) $(INSTALL_DIR)/bin/xdd.$(OS)
	$(INSTALL) -c -m 755 bin/xdd.$(OS) $(INSTALL_DIR)/bin/xdd
	$(INSTALL) -c -m 755 bin/timeserver.$(OS) $(INSTALL_DIR)/bin/timeserver.$(OS)
	$(INSTALL) -c -m 755 bin/timeserver.$(OS) $(INSTALL_DIR)/bin/timeserver
	$(INSTALL) -c -m 755 bin/gettime.$(OS) $(INSTALL_DIR)/bin/gettime.$(OS)
	$(INSTALL) -c -m 755 bin/gettime.$(OS) $(INSTALL_DIR)/bin/gettime
	$(INSTALL) -c -m 755 bin/read_tsdumps.$(OS) $(INSTALL_DIR)/bin/read_tsdumps.$(OS)
	$(INSTALL) -c -m 755 bin/read_tsdumps.$(OS) $(INSTALL_DIR)/bin/read_tsdumps
	$(INSTALL) -c -m 755 contrib/plot_tsdumps $(INSTALL_DIR)/bin/plot_tsdumps
	$(INSTALL) -c -m 755 contrib/xddcp $(INSTALL_DIR)/bin/xddcp
	$(INSTALL) -c -m 755 contrib/xddft $(INSTALL_DIR)/bin/xddft
	$(INSTALL) -c -m 755 contrib/xddmcp $(INSTALL_DIR)/bin/xddmcp
	$(INSTALL) -c -m 755 etc/xddmcp.conf.example $(INSTALL_DIR)/etc/xddmcp.conf.example

doc:
	doxygen doc/Doxyfile
	cd doc/doxygen/latex && make pdf

#
# Build test support infrastructure
#
MPICC = mpicc

contrib/mpil: contrib/mpil.o
	$(MPICC) $^ -o $@

contrib/mpil.o: contrib/mpil.c
	$(MPICC) -c $^ -o $@

test_clean:
	$(RM) contrib/mpil.o
	$(RM) contrib/mpil

test: contrib/mpil

#
# Include dependency makefiles if building source target
#
DEPFILTER_MAKECMDGOALS := $(filter %clean %doc, $(MAKECMDGOALS))
ifeq ($(strip $(DEPFILTER_MAKECMDGOALS)),)
-include $(XDD_DEPENDS)
#-include $(TOOLS_DEPENDS)
endif

#
# Additional rule for building dependencies
#
%.d: %.c
	@echo "Generating dependencies for $< . . ."
	@mkdir -p $(shell dirname $@)
	@$(DEPENDC) $(shell dirname $<) gcc -MM $(INCLUDES) $< > $@

#
# Make meta-directives
#
.PHONY: all clean depclean doc fastinstall install oclean tarball
