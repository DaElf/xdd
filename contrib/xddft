#!/bin/bash
#
# Implement the fork-thread access pattern with XDD.  Create a 
# user-specified number of threads, and have each thread perform
# random offset 16KiB reads.  Currently the -p option is not really
# supported.  Not sure if we should provide something like that with
# multiple target threads or provide a true forking implementation.
#
# Note:  The default seed ensures that different random offsets are
#  chosen for each invocation.
#

#
# Global constants
#
DEFAULT_DIO_FLAG=1
DEFAULT_IO_SIZE=16384
DEFAULT_IOP_COUNT=1024
DEFAULT_PROCESS_COUNT=1
DEFAULT_SEED=$(/bin/date +%s)
DEFAULT_THREAD_COUNT=4
DEFAULT_TIMESTAMP=$(/bin/date )
XDD_EXE=$(which xdd.Linux)
DATE_STAMP=`/bin/date +%m.%d.%y.%H.%M.%S`

#
# Print usage
#
function print_usage() {
    echo "xddft [OPTIONS] FILE"
    echo ""
    echo "FILE         - data file to access with fork-thread access pattern"
    echo ""
    echo "OPTIONS: "
    echo " -f FILE     - alternative specification for FILE"
    echo " -h          - Display this message"
    echo " -p procs    - number of processes to start (not supported) [Default: $DEFAULT_PROCESS_COUNT]"
    echo " -t threads  - number of threads per process [Default: $DEFAULT_THREAD_COUNT]"
    echo " -s SEED     - random seed to use [Default: $DEFAULT_SEED]"
    echo " -r count    - number of 16KiB IOPS per thread to perform [Default: $DEFAULT_IOP_COUNT]"
    echo " -o [0|1]    - Dis/enable direct I/O [Default: $DEFAULT_DIO_FLAG]"
    echo "NOTE: 'xdd.Linux' must be in your PATH env!!"    
}

function get_random_seed() {
    echo $RANDOM
}

#
# Main
#
function main() {

    #
    # Set the fork-thread parameters
    #
    local blockSize=1024
    local dioFlag=$DEFAULT_DIO_FLAG
    local filename=""
    local ioSize=$((DEFAULT_IO_SIZE/1024))
    local iopCount=$DEFAULT_IOP_COUNT
    local processCount=$DEFAULT_PROCESS_COUNT
    local threadCount=$DEFAULT_THREAD_COUNT
    local randomSeed=$(get_random_seed)

    while getopts ":hp:t:f:r:s:o:v" option; do
        case $option in
	    h)
		print_usage
		exit 0
		;;
            p) 
                processCount=$OPTARG
                ;;
            t) 
                threadCount=$OPTARG
                ;;
            f) 
                filename=$OPTARG
                ;;
	    r) 
                iopCount=$OPTARG
                ;;
	    s) 
                randomSeed=$OPTARG
                ;;
	    o) 
                dioFlag=$OPTARG 
                ;;
	    v) 
                verboseFlag=1
                ;;
            \?)
                echo "INFO: Unsupported option: -$OPTARG" >/dev/stderr 
		exit 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    # Retrieve file specified just on command line without flag
    if [ -z "$filename" -a -z "$1" ]; then
        print_usage
        exit 1
    elif [ ! -z "$filename" -a ! -z "$1" ]; then
	echo "ERROR: Cannot specify FILE and -f FILE simultaneously." >/dev/stderr
	exit 2
    elif [ -z "$filename" ]; then
	filename=$1
    fi

    # Ensure file can be read and has non-zero size
    if [ ! -r "$filename" ]; then
	echo "ERROR: Unable to read $filename" >/dev/stderr
	exit 3
    fi

    # Ensure file has size larger than 1024
    local fileSize=$(/usr/bin/stat -c %s $filename)
    if [ $ioSize -gt $fileSize ]; then
	echo "ERROR: $filename size is $fileSize is not larger than $ioSize" >/dev/stderr
	exit 4
    fi

    # Ensure the DIO flag is set to 0 or 1
    if [ 0 -ne "$dioFlag" -a 1 -ne "$dioFlag" ]; then
	echo "ERROR: DIO flag must be specified as 0 or 1" >/dev/stderr
	exit 5
    fi

    #
    # Configure XDD parameters
    #
    local seekRange=$(((fileSize-ioSize)/1024))
    local totalIops=$((iopCount*threadCount))

    local dioOption="-dio"
    if [ 0 == "$dioFlag" ]; then
       dioOption=""
    fi
    FN="xddft.reqsize.${ioSize}.blocksize.${blockSize}.numreqs.${iopCount}.qd.${threadCount}.sr.${seekRange}.ds.${DATE_STAMP}"

    #
    # Perform IOP tests
    #
    $XDD_EXE -op read \
	-target $filename \
        -reqsize $ioSize \
	-blocksize $blockSize \
	-numreqs $totalIops \
        -seek random \
	-seek seed $randomSeed \
	-seek range $seekRange \
        ${dioOption} \
	-qd $threadCount \
	-heartbeat 1 \
	-heartbeat ops \
	-heartbeat pct \
	-verbose \
	-qthreadinfo \
        -ts output ${FN} \
        -csvout ${FN}.csv

    return 0
}

#
# Seed BASH's random number generator
#
RANDOM=$DEFAULT_RANDOM_SEED

#
# Invoke main
#
main $*
exit $?
