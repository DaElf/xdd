#!/bin/env python

# Import modules
import unittest
import Pyro4
from xdd.transport import FlowBuilderTransport
from xdd.flowbuilder import FlowBuilder

# Standard testing strategy: try to check each side of each branch statement
# for correctness

# Test constructor method of FlowBuilderTransport
class FlowBuilderTransportConstructorTestCase(unittest.TestCase):
    """Test createFlows method of Flow"""

    def test_single_transport(self):
        """Create a single server on a host"""
        fbt1 = FlowBuilderTransport("127.0.0.1")
        fbt1.shutdown()
        fbt2 = FlowBuilderTransport("127.0.0.1")
        fbt2.shutdown()

    def test_multiple_transport(self):
        """Create multiple servers on the same host"""
        fbt1 = FlowBuilderTransport("127.0.0.1")
        fbt2 = FlowBuilderTransport("127.0.0.1")
        fbt2.shutdown()
        fbt1.shutdown()

# Test getFlowBuilder method of FlowBuilderTransport
class FlowBuilderTransportGetFlowBuilderTestCase(unittest.TestCase):
    """Test createFlows method of Flow"""

    def test_single_flowbuilder(self):
        """Create a single server on a host"""
        fbt = FlowBuilderTransport("127.0.0.1")
        fb = fbt.getFlowBuilder()
        self.assertEqual(True, fb.isReady())
        self.assertRaises(Pyro4.errors.ConnectionClosedError, fb.shutdown)

    def test_multiple_flowbuilder(self):
        """Create multiple servers on the same host"""
        fbt1 = FlowBuilderTransport("127.0.0.1")
        fb1 = fbt1.getFlowBuilder()
        fbt2 = FlowBuilderTransport("127.0.0.1")
        fb2 = fbt2.getFlowBuilder()
        self.assertEqual(True, fb1.isReady())
        self.assertEqual(True, fb2.isReady())
        self.assertRaises(Pyro4.errors.ConnectionClosedError, fb1.shutdown)
        self.assertRaises(Pyro4.errors.ConnectionClosedError, fb2.shutdown)


if __name__ == '__main__':
    unittest.main()
