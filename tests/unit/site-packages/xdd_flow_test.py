#!/bin/env python

# Import modules
import xdd_settings
import xdd
import unittest

# Standard testing strategy: try to check each side of each branch statement
# for correctness

# Test checkPreconditions method of Flow
class FlowCheckPreconditionsTestCase(unittest.TestCase):
    """Test checkPreconditions method of Flow"""
    def test_sink(self):
        """Test sink side of branch"""
        flow = xdd.Flow(True, "/dev/null", 32768, 100000,
                        0, 1, True, 0, [("localhost", 40000, 1)],
                        False, False, False, False)
        self.assertEqual(True, flow.checkPreconditions())

    def test_source(self):
        """Test source side of branch"""
        flow = xdd.Flow(False, "/dev/zero", 8192, 20000,
                        0, 1, True, 8192, [("localhost", 40000, 8)],
                        False, True, True, True)
        self.assertEqual(True, flow.checkPreconditions())

class FlowCheckSinkPreconditionsTestCase(unittest.TestCase):
    """Test checkSinkPreconditions method of Flow"""

    def test_character_device(self):
        """Test a valid character device"""
        flow = xdd.Flow(True, "/dev/null",  4096, 100000,
                        0, 1, False, 0, [("localhost", 40000, 1)],
                        False, False, False, False)
        self.assertEqual(True, flow.checkSinkPreconditions())

    def test_character_device_dio(self):
        """Test an invalid character device (DIO is not allowed)"""
        flow = xdd.Flow(True, "/dev/null", 8192, 16384,
                        0, 1, False, 0, [("localhost", 40000, 1)],
                        True, False, False, False)
        self.assertEqual(False, flow.checkSinkPreconditions())

    def test_block_device_non_root(self):
        """Test a block device device (non-root is not allowed)"""
        flow = xdd.Flow(True, "/dev/disk0", 16384, 32768,
                        0, 1, False, 0, [("localhost", 40000, 1)],
                        False, False, False, False)
        self.assertEqual(False, flow.checkSinkPreconditions())

    def test_regular_file(self):
        """Test a valid existing file"""
        flow = xdd.Flow(True, "Makefile", 1024, 4096,
                        0, 1, False, 0, [("localhost", 40000, 1)],
                        False, False, False, False)
        self.assertEqual(True, flow.checkSinkPreconditions())

    def test_regular_file_parent_dir_exists(self):
        """Test a valid file with a valid parent directory"""
        flow = xdd.Flow(True, "/tmp/non_existant_file", 1024, 4096,
                        0, 1, False, 0, [("localhost", 40000, 1)],
                        False, False, False, False)
        self.assertEqual(True, flow.checkSinkPreconditions())

class FlowCheckSourcePreconditionsTestCase(unittest.TestCase):
    """Test checkSourcePreconditions method of Flow"""

    def test_character_device(self):
        flow = xdd.Flow(False, "/dev/zero", 1024, 1024,
                        0, 1, False, 0, [("localhost", 40000, 1)],
                        False, False, False, False)
        self.assertEqual(True, flow.checkSourcePreconditions())

    def test_character_device_dio(self):
        flow = xdd.Flow(False, "/dev/zero", 1024, 1024,
                        0, 1, False, 0, [("localhost", 40000, 1)],
                        True, False, False, False)
        self.assertEqual(False, flow.checkSourcePreconditions())

    def test_block_device_non_root(self):
        flow = xdd.Flow(False, "/dev/disk0", 1024, 1024,
                        0, 1, False, 0, [("localhost", 40000, 1)],
                        False, False, False, False)
        self.assertEqual(False, flow.checkSourcePreconditions())

    def test_regular_file_exists(self):
        flow = xdd.Flow(False, "Makefile", 1024, 1024,
                        0, 1, False, 0, [("localhost", 40000, 1)],
                        False, False, False, False)
        self.assertEqual(True, flow.checkSourcePreconditions())

    def test_non_file(self):
        flow = xdd.Flow(False, "/not/defined/path/to/file", 1024, 1024,
                        0, 1, False, 0, [("localhost", 40000, 1)],
                        False, False, False, False)
        self.assertEqual(False, flow.checkSourcePreconditions())

class FlowCreateCommandArgsTestCase(unittest.TestCase):
    """Test createCommandArgs method of Flow"""

    def test_single_sink(self):
        """Test a valid single sink"""
        flow = xdd.Flow(True, "foo1", 1024, 1024,
                        0, 1, False, 0, [("host", 40000, 1)],
                        False, False, False, False)
        expected = ["xdd", "-target", "foo1", "-op", "write", "-e2e", "isdest"]
        expected.extend(["-reqsize", "1024", "-bytes", "1024"])
        expected.extend(["-e2e", "dest", "host:40000,1"])
        #expected.extend(["-preallocate", "1024"])
        expected.extend(["-noordering"])
        expected.extend(["-verbose", "-minall", "-stoponerror"])
        #expected.extend(["-stdout", "logfile"])
        cmd = flow.createCommandArgs()
        i = 0
        for e in expected:
            self.assertEqual(e, cmd[i])
            i += 1
        self.assertEqual(len(expected), len(cmd))

    def test_single_source(self):
        """Test a valid single source"""
        flow = xdd.Flow(False, "foo2", 1024, 1024,
                        0, 1, False, 0, [("localhost", 40000, 1)],
                        False, False, False, False)
        expected = ["xdd", "-target", "foo2", "-op", "read", "-e2e", "issource"]
        expected.extend(["-reqsize", "1024", "-bytes", "1024"])
        expected.extend(["-e2e", "dest", "localhost:40000,1"])
        expected.extend(["-looseordering"])
        expected.extend(["-verbose", "-minall", "-stoponerror"])
        expected.extend(["-hb", "4", "-hb", "pct", "-hb", "bw"])
        
        cmd = flow.createCommandArgs()
        i = 0
        for e in expected:
            self.assertEqual(e, cmd[i])
            i += 1
        self.assertEqual(len(expected), len(cmd))

    def test_multiple_sink(self):
        """Test a valid multiple sink"""
        flow = xdd.Flow(True, "foo3", 1024, 1024,
                        0, 1, False, 0, [("if1", 40000, 1), ("if2", 40000, 1)],
                        False, False, False, False)
        expected = ["xdd", "-target", "foo3", "-op", "write", "-e2e", "isdest"]
        expected.extend(["-reqsize", "1024", "-bytes", "1024"])
        expected.extend(["-e2e", "dest", "if1:40000,1"])
        expected.extend(["-e2e", "dest", "if2:40000,1"])
        #expected.extend(["-preallocate", "1024"])
        expected.extend(["-noordering"])
        expected.extend(["-verbose", "-minall", "-stoponerror"])
        #expected.extend(["-stdout", "logfile"])
        
        cmd = flow.createCommandArgs()
        i = 0
        for e in expected:
            self.assertEqual(e, cmd[i])
            i += 1
        self.assertEqual(len(expected), len(cmd))

    def test_multiple_source(self):
        """Test a valid multiple source"""
        flow = xdd.Flow(False, "foo4", 1024, 1024, 
                        0, 1, False, 0, [("if1", 40000, 1), ("if2", 40000, 1)],
                        False, False, False, False)
        expected = ["xdd", "-target", "foo4", "-op", "read", "-e2e", "issource"]
        expected.extend(["-reqsize", "1024", "-bytes", "1024"])
        expected.extend(["-e2e", "dest", "if1:40000,1"])
        expected.extend(["-e2e", "dest", "if2:40000,1"])
        expected.extend(["-looseordering"])
        expected.extend(["-verbose", "-minall", "-stoponerror"])
        expected.extend(["-hb", "4", "-hb", "pct", "-hb", "bw"])
        
        cmd = flow.createCommandArgs()
        i = 0
        for e in expected:
            self.assertEqual(e, cmd[i])
            i += 1
        self.assertEqual(len(expected), len(cmd))

class FlowStartTestCase(unittest.TestCase):
    """Test start method of Flow"""
    def test_start_sink(self):
        flow = xdd.Flow(True, "/tmp/testfile", 1024, 1024, 
                        0, 1, False, 0, [("localhost", 40000, 1), ("localhost", 40010, 1)],
                        False, False, False, False)
        cmd = flow.createCommandArgs()
        print("Cmd:", cmd)
        #flow.start()
        #print('Test started')
        #while flow.completionStatus() is None:
        #    flow.pollStatus()
        #    time.sleep(3)
        #print('Test complete')

    """Test start method of Flow"""
    def test_start_source(self):
        flow = xdd.Flow(False, "Makefile", 1024, 1024, 
                        0, 1, False, 0, [("localhost", 40000, 1), ("localhost", 40010, 1)],
                        False, False, False, False)
        cmd = flow.createCommandArgs()
        print("Cmd:", cmd)
        #flow.start()
        #print('Test started')
        #while flow.completionStatus() is None:
        #    flow.pollStatus()
        #    time.sleep(3)
        #print('Test complete')
        
if __name__ == '__main__':
    unittest.main()
